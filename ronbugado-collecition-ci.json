{
	"info": {
		"_postman_id": "1e118794-9ade-4ab9-9ee5-6756f35784dc",
		"name": "Ron Bugado (Collection)",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31557298"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Fazer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set (\"tokenAdmin\", pm.response.json().token)\r",
									"\r",
									"pm .test (\"Validar Status Code = 200\",() => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test (\"Verificar se o token √© v√°lido\", () => {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"})\r",
									"\r",
									"pm.test (\"Validar Menssagem de Login com Sucesso\", () => {\r",
									"    pm.environment.set (\"msgAdmin\", pm.response.json().msg);\r",
									"})\r",
									"\r",
									"pm.test (\"Verificar ID Admin\", () => {\r",
									"    pm.environment.set (\"IDAdmin\", pm.response.json().user._id);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{email_Admin}}\",\r\n    \"password\": \"{{senha_Admin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL_RonBugado}}/api/login/",
							"host": [
								"{{baseURL_RonBugado}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar Token",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL_RonBugado}}/api/validateToken",
							"host": [
								"{{baseURL_RonBugado}}"
							],
							"path": [
								"api",
								"validateToken"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Endpoints relacionados ao login."
		},
		{
			"name": "Users - Feature",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Criar Usu√°rio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Usu√°rio com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° ${pm.environment.get(\"FullName\")}, cadastro realizado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Armazenar ID do usu√°rio\", function () {\r",
											"    // Parse o corpo da resposta como JSON\r",
											"    let response = pm.response.json();\r",
											"    \r",
											"    // Extraia o valor de \"_id\" do usu√°rio\r",
											"    let userId = response.user._id;\r",
											"    \r",
											"    // Armazene o ID extra√≠do na vari√°vel \"IDUser\"\r",
											"    pm.environment.set(\"IDUser\", userId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@Test\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Todas os Usu√°rios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Usu√°rio por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contagem de Usu√°rios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/count",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Dados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"{{FullName}}\",\n  \"mail\": \"{{Email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Senha",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"1234@Tjjest\",\n  \"confirmPassword\": \"1234@Tjjest\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/password/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Status Usu√°rio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Usu√°rio Atualizado com Sucesso\", () => {\r",
											"    const expectedMessage = `Status do usuario atualizado com sucesso para status true.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/status/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar Usu√°rio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Usu√°rio Deletado com Sucesso\", () => {\r",
											"    const expectedMessage = `Usu√°rio deletado com sucesso!.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Novo Cadastro de Usu√°rio",
					"item": [
						{
							"name": "Criar Novo Usu√°rio (caminho feliz)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Usu√°rio com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° ${pm.environment.get(\"FullName\")}, cadastro realizado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Armazenar ID do usu√°rio\", function () {\r",
											"    // Parse o corpo da resposta como JSON\r",
											"    let response = pm.response.json();\r",
											"    \r",
											"    // Extraia o valor de \"_id\" do usu√°rio\r",
											"    let userId = response.user._id;\r",
											"    \r",
											"    // Armazene o ID extra√≠do na vari√°vel \"IDUser\"\r",
											"    pm.environment.set(\"IDUser\", userId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@Test\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar NOME com 101 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao inserir mais de 100 caarcteres campo NOME\", () => {\r",
											"    const expectedMessage = `O nome completo deve ter no m√°ximo 100 caracteres.`;\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Abcdefghij AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@Test\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar NOME contendo N√öMEROS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao inserir numeros no campo NOME\", () => {\r",
											"    const expectedMessage = `O campo nome completo n√£o deve conter n√∫meros`;\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"151542 52424\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@Test\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar EMAIL vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO de EMAIL obrigat√≥rio\", () => {\r",
											"    const expectedMessage = `O campo e-mail √© obrigat√≥rio.`;\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"\",\r\n  \"password\": \"1234@Test\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar Senha sem conter letras obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO informando quais caracteres devem ser obrigat√≥rios na senha\", () => {\r",
											"    const expectedMessage = `Senha precisa ter: uma letra mai√∫scula, uma letra min√∫scula, um n√∫mero, um caractere especial(@#$%) e tamanho entre 8-12.`;\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@123\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar CONFIRMAR SENHA Vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO informando que o CONFIRMAR SENHA √© obrigat√≥rio\", () => {\r",
											"    const expectedMessage = \"O campo de confirma√ß√£o de senha √© obrigat√≥rio.\";\r",
											"    pm.expect(pm.response.json().error[1]).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@123\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar Senha diferente de CONFIRMAR SENHA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());\r",
											"\r",
											"\r",
											"// fun√ß√£o que gera um CPF aleat√≥rio\r",
											"function gerarCPF() {\r",
											"    let cpfAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 11 d√≠gitos\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        cpfAleatorio += Math.floor(Math.random() * 10); \r",
											"    }\r",
											"    return cpfAleatorio;\r",
											"}\r",
											"// Armazenar o CPF gerado na vari√°vel de ambiente 'CPF'\r",
											"pm.environment.set(\"CPF\", gerarCPF());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO de SENHA e CONFIRMA SENHA s√£o diferentes\", () => {\r",
											"    const expectedMessage = `As senhas n√£o conferem.`;\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Email}}\",\r\n  \"password\": \"1234@Testdfg\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234@dsfsffTest\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Editar Usu√°rio",
					"item": [
						{
							"name": "Atualizar Status Usu√°rio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Usu√°rio Atualizado com Sucesso\", () => {\r",
											"    const expectedMessage = `Status do usuario atualizado com sucesso para status true.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/status/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar campo Status Vazio - Usu√°rio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/status/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Status Usu√°rio c/ TOKEN ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 403\",() => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o STATUS da Empresa s/ enviar TOKEN\", () => {\r",
											"    const expectedMessage = \"No token provided.\";\r",
											"    pm.expect(pm.response.json().errors[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/status/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Senha",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"1234@Tjjest\",\n  \"confirmPassword\": \"1234@Tjjest\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/password/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Dados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o que gera um Nome aleat√≥rio\r",
											"function gerarNome() {\r",
											"    const nomes = [\r",
											"    \"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\",\r",
											"    \"Christopher\", \"Daniel\", \"Matthew\", \"Anthony\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\",\r",
											"    \"Brian\", \"Paul\", \"Andrew\", \"Joshua\", \"Kevin\", \"Gary\", \"Timothy\", \"Jose\", \"Ryan\", \"Nicholas\", \"Eric\",\r",
											"    \"Stephen\", \"Jacob\", \"Larry\", \"Justin\", \"Scott\", \"Brandon\", \"Benjamin\", \"Samuel\", \"Gregory\", \"Frank\", \r",
											"    \"Alexander\", \"Jack\", \"Dennis\", \"Jerry\", \"Tyler\", \"Aaron\", \"Henry\", \"Douglas\", \"Peter\", \"Adam\"\r",
											"];\r",
											"    const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"// Armazena Nome\r",
											"pm.environment.set(\"FirstName\", gerarNome());\r",
											"\r",
											"// Fun√ß√£o que gera um Sobrenome aleat√≥rio\r",
											"function gerarSobrenome() {\r",
											"    const sobrenomes = [\r",
											"    \"Muller\", \"Bernardi\", \"Romano\", \"Ferro\", \"Rossi\", \"Bianchi\", \"Conti\", \"Giordano\", \"Costa\", \"Lombardi\",\r",
											"    \"Moretti\", \"Ricci\", \"Ferrari\", \"Esposito\", \"Giovanni\", \"Marino\", \"Vitali\", \"Galli\", \"Corsi\", \"DeLuca\",\r",
											"    \"Sartori\", \"Benedetti\", \"Palermo\", \"Mancini\", \"Ruggiero\", \"Cappelli\", \"DeAngelis\", \"Vallini\", \"DellaCruz\",\r",
											"    \"DiLuca\", \"Vittori\", \"Amato\", \"Giuliani\", \"Monti\", \"Barbieri\", \"Longo\", \"Santoro\", \"Fusco\", \"Valente\",\r",
											"    \"Sorrentino\", \"Caputo\", \"Toscano\", \"Iacono\", \"Martino\", \"Saba\", \"Rinaldi\", \"DiPietro\", \"Castelli\", \"Zito\"\r",
											"];\r",
											"    const sobrenomeAleatorio = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    return sobrenomeAleatorio;\r",
											"}\r",
											"// Armzena o Sobrenome\r",
											"pm.environment.set(\"LastName\", gerarSobrenome());\r",
											"\r",
											"// Concatena e Armazena o Nome e Sobrenome gerado\r",
											"pm.environment.set(\"FullName\", `${pm.environment.get(\"FirstName\")} ${pm.environment.get(\"LastName\")}`);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o que gera um Email aleat√≥rio\r",
											"function gerarEmail() {\r",
											"    const valorAleatorio = Math.floor(Math.random() * 1000000000); // Gera um n√∫mero aleat√≥rio de at√© 6 d√≠gitos\r",
											"    return `testeRonBugado${valorAleatorio}@testeqa.com`;\r",
											"}\r",
											"// Armazenar o Email gerado\r",
											"pm.environment.set(\"Email\", gerarEmail());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"{{FullName}}\",\n  \"mail\": \"{{Email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Lista Cadastro de Usu√°rio",
					"item": [
						{
							"name": "Listar Todas as Usu√°rios da base",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Lista a Quantidade de Usu√°rios na Base",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/count",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usu√°rio por ID (caminho feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar por ID inexistente/ inv√°lido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 500\",() => {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/hs5366b57fa308107b5b9hs6",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"hs5366b57fa308107b5b9hs6"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Deletar Usu√°rio",
					"item": [
						{
							"name": "Deletar Usu√°rio (caminho feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Usu√°rio Deletado com Sucesso\", () => {\r",
											"    const expectedMessage = `Usu√°rio deletado com sucesso!.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar o mesmo Usu√°rio pela 2X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Erro ao tentar deletar o mesmo Usu√°rio pela 2X\", () => {\r",
											"    const expectedMessage = \"Esse usu√°rio n√£o existe em nossa base de dados.\";\r",
											"    pm.expect(pm.response.json().alert[0]).to.eql(expectedMessage);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/user/{{IDUser}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"user",
										"{{IDUser}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Relaciona os endpoints referentes as empresa."
		},
		{
			"name": "Company - Feature",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Criar Empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Salvar ID da empresa na vari√°vel\", function () {\r",
											"    // Parse o corpo da resposta como JSON\r",
											"    let response = pm.response.json();\r",
											"    \r",
											"    // Extraia o valor de \"_id\" da empresa\r",
											"    let companyId = response.newCompany._id;\r",
											"    \r",
											"    // Armazene o ID extra√≠do na vari√°vel \"IDCompany\"\r",
											"    pm.environment.set(\"IDCompany\", companyId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Todas as Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Empresa por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contagem de Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/count",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Dados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Dados da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia atualizada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{companyName}}\",\n  \"registerCompany\": \"{{companyCNPJ}}\",\n  \"mail\": \"test@test.com\",\n  \"matriz\": \"{{razaoSocial}}\",\n  \"responsibleContact\": \"Marcio\",\n  \"telephone\": \"99999999999999\",\n  \"serviceDescription\": \"Testes\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Endere√ßo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Endere√ßo da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Endere√ßo da companhia atualizado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": [\n    {\n      \"zipCode\": \"12345678\",\n      \"city\": \"Osasco\",\n      \"state\": \"SP\",\n      \"district\": \"Rua dos Testers\",\n      \"street\": \"Avenida dos QAs\",\n      \"number\": \"13\",\n      \"complement\": \"Apto 543\",\n      \"country\": \"Brazil\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/address/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Status Empresa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Empresa Atualizada com Sucesso\", () => {\r",
											"    const expectedMessage = `Status da companhia atualizado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/status/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar Empresa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Empresa Deletada com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia deletado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Novo Cadastro de Empresa",
					"item": [
						{
							"name": "Criar Nova Empresa (Caminho Feliz)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Salvar ID da empresa na vari√°vel\", function () {\r",
											"    // Parse o corpo da resposta como JSON\r",
											"    let response = pm.response.json();\r",
											"    \r",
											"    // Extraia o valor de \"_id\" da empresa\r",
											"    let companyId = response.newCompany._id;\r",
											"    \r",
											"    // Armazene o ID extra√≠do na vari√°vel \"IDCompany\"\r",
											"    pm.environment.set(\"IDCompany\", companyId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Raz√£o Social - MENOS de 100 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Raz√£o Social - MAIS de 100 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem campo 'Raz√£o Social' deve ter no m√°ximo 100 caracteres\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'Raz√£o Social' da empresa deve ter no m√°ximo 100 caracteres.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Raz√£o Social - VAZIO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem campo 'Raz√£o Social' √© obrigat√≥rio\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'Raz√£o Social' da empresa √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Raz√£o Social - NULO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem campo 'Raz√£o Social' √© obrigat√≥rio\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'Raz√£o Social' da empresa √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": null,\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Raz√£o Social - Validos (Alfanum√©ricos)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Descri√ß√£o - VAZIO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem o campo 'Descri√ß√£o' √© obrigat√≥rio.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'Descri√ß√£o' √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Descri√ß√£o - NULO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem o campo 'Descri√ß√£o' √© obrigat√≥rio.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'Descri√ß√£o' √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": null,\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Descri√ß√£o - Validos (Alfanum√©ricos)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - VAZIO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem O campo 'bairro' √© obrigat√≥rio.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'bairro' √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - NULO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem O campo 'bairro' √© obrigat√≥rio.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'bairro' √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": null,\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - Validos (¬™', '¬∫', '‚Äò' e '-')",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem O campo 'bairro' s√≥ pode conter letras, n√∫meros e os caracteres especiais '¬™', '¬∫', '‚Äò' e '-'\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'bairro' s√≥ pode conter letras, n√∫meros e os caracteres especiais '¬™', '¬∫', '‚Äò' e '-'`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"¬™¬∫‚Äò-\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - Validos (Alfanum√©ricos)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"AbCdEfG123456\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - Inv√°lidos (Especiais)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem O campo 'bairro' s√≥ pode conter letras, n√∫meros e os caracteres especiais '¬™', '¬∫', '‚Äò' e '-'\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'bairro' s√≥ pode conter letras, n√∫meros e os caracteres especiais '¬™', '¬∫', '‚Äò' e '-'`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"%$#*&(\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - MENOS 50 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"A1b2C3d4E5f6G7h8I9j0KlmNopQrStUvWxYzJqO1234567890\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Bairro - MAIS 50 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo 'bairro' deve possuir no m√°ximo 50 caracteres.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'bairro' deve possuir no m√°ximo 50 caracteres.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"A1b2C3d4E5f6G7h8I9j0KlmNopQrStUvWxYzJqO123456789012\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CEP - VAZIO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo 'CEP' √© obrigat√≥rio.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'CEP' √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"AbCdEfG123456\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CEP - Validos (N√∫meros)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar Mensagem de Cadastro de Empresao com Sucesso\", () => {\r",
											"    const expectedMessage = `Ol√° a companhia ${pm.environment.get(\"companyName\")} foi cadastrada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"AbCdEfG123456\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CEP - NULO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo 'CEP' √© obrigat√≥rio.\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'CEP' √© obrigat√≥rio.`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": null,\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"AbCdEfG123456\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CEP - Invalidos (Letras)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo 'CEP' s√≥ pode conter n√∫meros\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'CEP' s√≥ pode conter n√∫meros`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"hdgFjDtG\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"AbCdEfG123456\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CEP - Invalidos (Especiais)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());\r",
											"\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um nome de Raz√£o Social aleat√≥rio com 10 caracteres, contendo pelo menos uma letra e um n√∫mero\r",
											"function generateRazaoSocial(length) {\r",
											"    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const numbers = '0123456789';\r",
											"    const chars = letters + numbers;\r",
											"    // Garante que tenha pelo menos uma letra e um n√∫mero\r",
											"    let razaoSocial = '';\r",
											"    razaoSocial += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    razaoSocial += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    // Preenche o restante dos caracteres de forma aleat√≥ria\r",
											"    for (let i = 2; i < length; i++) {\r",
											"        razaoSocial += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return razaoSocial;\r",
											"}\r",
											"// Defina o comprimento desejado para o campo Raz√£o Social (10 caracteres)\r",
											"const razaoSocialLength = 10;\r",
											"// Armazene o valor gerado em uma vari√°vel no ambiente do Postman\r",
											"pm.environment.set(\"razaoSocial\", generateRazaoSocial(razaoSocialLength));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo 'CEP' s√≥ pode conter n√∫meros\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedMessage = `O campo 'CEP' s√≥ pode conter n√∫meros`;\r",
											"    pm.expect(response.error[0]).to.eql(expectedMessage);  // Acessa o primeiro item do array\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{companyName}}\",\r\n  \"registerCompany\": \"{{companyCNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"{{razaoSocial}}\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes123\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"$#&%@*#&\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"AbCdEfG123456\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Editar Dados de Empresa",
					"item": [
						{
							"name": "Editar Todos os Dados (Caminho Feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Dados da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia atualizada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{companyName}}\",\n  \"registerCompany\": \"{{companyCNPJ}}\",\n  \"mail\": \"testsdgfdsfg@test.com\",\n  \"matriz\": \"{{razaoSocial}}\",\n  \"responsibleContact\": \"Marcio Tinucco\",\n  \"telephone\": \"12999999999997\",\n  \"serviceDescription\": \"Testesswssss\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NOME da empresa c/ MENOS de 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Dados da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia atualizada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1\",\n  \"registerCompany\": \"{{companyCNPJ}}\",\n  \"mail\": \"testsdgfdsfg@test.com\",\n  \"matriz\": \"{{razaoSocial}}\",\n  \"responsibleContact\": \"Marcio Tinucco\",\n  \"telephone\": \"12999999999997\",\n  \"serviceDescription\": \"Testesswssss\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RAZAO SOCIAL  da empresa c/ MENOS de 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Dados da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia atualizada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{companyName}}\",\n  \"registerCompany\": \"{{companyCNPJ}}\",\n  \"mail\": \"testsdgfdsfg@test.com\",\n  \"matriz\": \"abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1\",\n  \"responsibleContact\": \"Marcio Tinucco\",\n  \"telephone\": \"12999999999997\",\n  \"serviceDescription\": \"Testesswssss\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CONTATA RESPONS√ÅVEL  da empresa c/ MENOS de 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Dados da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia atualizada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{companyName}}\",\n  \"registerCompany\": \"{{companyCNPJ}}\",\n  \"mail\": \"testsdgfdsfg@test.com\",\n  \"matriz\": \"{{razaoSocial}}\",\n  \"responsibleContact\": \"abcdefghij abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghi\",\n  \"telephone\": \"12999999999997\",\n  \"serviceDescription\": \"Testesswssss\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TELEFONE c/ MENOS 15 numeros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Dados da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia atualizada com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fun√ß√£o para gerar um nome aleat√≥rio com letras e n√∫meros\r",
											"function gerarNomeAleatorio(tamanho) {\r",
											"    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let nomeAleatorio = '';\r",
											"    // Gera uma sequ√™ncia aleat√≥ria de 'tamanho' caracteres\r",
											"    for (let i = 0; i < tamanho; i++) {\r",
											"        nomeAleatorio += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
											"    }\r",
											"    return nomeAleatorio;\r",
											"}\r",
											"const prefixo = \"Company \";\r",
											"const sufixo = \" Ltda\";\r",
											"const tamanhoNomeRandomico = 10; \r",
											"  // Gerar o nome final com 10 caracteres aleat√≥rios entre 'Company' e 'Ltda'\r",
											"const nomeEmpresa = prefixo + gerarNomeAleatorio(tamanhoNomeRandomico) + sufixo;\r",
											"  // Armazenar o nome gerado na vari√°vel de ambiente 'companyName'\r",
											"pm.environment.set(\"companyName\", nomeEmpresa);\r",
											"\r",
											"\r",
											"// Fun√ß√£o para gerar um CNPJ aleat√≥rio de 14 d√≠gitos \r",
											"function gerarCNPJ() {\r",
											"    let cnpjAleatorio = '';\r",
											"    // Gera uma sequ√™ncia de 14 d√≠gitos\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpjAleatorio += Math.floor(Math.random() * 10); // Gera um d√≠gito aleat√≥rio de 0 a 9\r",
											"    }\r",
											"    return cnpjAleatorio;\r",
											"}\r",
											"// Armazenar o CNPJ gerado na vari√°vel de ambiente 'companyCNPJ'\r",
											"pm.environment.set(\"companyCNPJ\", gerarCNPJ());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{companyName}}\",\n  \"registerCompany\": \"{{companyCNPJ}}\",\n  \"mail\": \"testsdgfdsfg@test.com\",\n  \"matriz\": \"{{razaoSocial}}\",\n  \"responsibleContact\": \"Marcio Tinucco\",\n  \"telephone\": \"01234567891234\",\n  \"serviceDescription\": \"Testesswssss\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Editar Endere√ßo de Empresa",
					"item": [
						{
							"name": "Atualizar Endere√ßo Empresa (caminho Feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Endere√ßo da Empresa Atualizados com Sucesso\", () => {\r",
											"    const expectedMessage = `Endere√ßo da companhia atualizado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": [\n    {\n      \"zipCode\": \"12345678\",\n      \"city\": \"Osascosss\",\n      \"state\": \"SP\",\n      \"district\": \"Rua dos Testersss\",\n      \"street\": \"Avenida dos QAssss\",\n      \"number\": \"25\",\n      \"complement\": \"Apto 543\",\n      \"country\": \"Brazil\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/address/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "campo LOGRADOURO (streeet) vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o Endere√ßo da Empresa\", () => {\r",
											"    const expectedMessage = \"O campo 'logradouro' √© obrigat√≥rio.\";\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": [\n    {\n      \"zipCode\": \"12345678\",\n      \"city\": \"Osascosss\",\n      \"state\": \"SP\",\n      \"district\": \"Rua dos Testersss\",\n      \"street\": \"\",\n      \"number\": \"25\",\n      \"complement\": \"Apto 543\",\n      \"country\": \"Brazil\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/address/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "campo NUMERO c/ caracteres inv√°lidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o NUMERO da Empresa c/ caracteres especiais\", () => {\r",
											"    const expectedMessage = \"O campo 'n√∫mero' s√≥ pode conter letras, n√∫meros e o caractere especial '/'\";\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": [\n    {\n      \"zipCode\": \"12345678\",\n      \"city\": \"Osascosss\",\n      \"state\": \"SP\",\n      \"district\": \"Rua dos Testersss\",\n      \"street\": \"Avenida dos QAssss\",\n      \"number\": \"%$\",\n      \"complement\": \"Apto 543\",\n      \"country\": \"Brazil\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/address/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "campo COMPLEMENTO c/ MAIS 80 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o COMPLEMENTO da Empresa c/ MAIS de 80 caracteres\", () => {\r",
											"    const expectedMessage = \"O campo 'complemento' deve possuir no m√°ximo 80 caracteres.\";\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": [\n    {\n      \"zipCode\": \"12345678\",\n      \"city\": \"Osascosss\",\n      \"state\": \"SP\",\n      \"district\": \"Rua dos Testersss\",\n      \"street\": \"Avenida dos QAssss\",\n      \"number\": \"25\",\n      \"complement\": \"abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi1abcdefghi11\",\n      \"country\": \"Brazil\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/address/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "campo ESTADO c/ MAIS de 2 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o ESTADO da Empresa c/ MAIS de 2 caracteres\", () => {\r",
											"    const expectedMessage = \"O campo 'estado' deve possuir 2 caracteres.\";\r",
											"    pm.expect(pm.response.json().error[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": [\n    {\n      \"zipCode\": \"12345678\",\n      \"city\": \"Osascosss\",\n      \"state\": \"SPEE\",\n      \"district\": \"Rua dos Testersss\",\n      \"street\": \"Avenida dos QAssss\",\n      \"number\": \"25\",\n      \"complement\": \"Apto 543\",\n      \"country\": \"Brazil\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/address/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Atualizar Status de Empresa",
					"item": [
						{
							"name": "Atualizar Status Empresa (Caminho Feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 201\",() => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Empresa Atualizada com Sucesso\", () => {\r",
											"    const expectedMessage = `Status da companhia atualizado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/status/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enviar campo Status Vazio - Empresa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 400\",() => {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/status/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Status Empresa c/ TOKEN ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 403\",() => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o STATUS da Empresa s/ enviar TOKEN\", () => {\r",
											"    const expectedMessage = \"No token provided.\";\r",
											"    pm.expect(pm.response.json().errors[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/status/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Lista Cadastro de Empresa",
					"item": [
						{
							"name": "Lista a Quantidade de Empresas na Base",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/count",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Todas as Empresas da base",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Consultar Empresa ID",
					"item": [
						{
							"name": "Empresa por ID (Caminho Feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultar Empresa c/ TOKEN ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 403\",() => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de ERRO ao tentar atualizar o STATUS da Empresa s/ enviar TOKEN\", () => {\r",
											"    const expectedMessage = \"No token provided.\";\r",
											"    pm.expect(pm.response.json().errors[0]).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultar Empresa com ID n√£o cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 500\",() => {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/673351fe7fa308107b5ac90ddasfdfsa",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"673351fe7fa308107b5ac90ddasfdfsa"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests - PBI - Deletar Empresa",
					"item": [
						{
							"name": "Deletar Empresa  (Caminho Feliz)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Empresa Deletada com Sucesso\", () => {\r",
											"    const expectedMessage = `Companhia deletado com sucesso.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar a mesma Empresa pela 2X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Validar Status Code = 404\",() => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validar Mensagem de Erro ao tentar deletar a mesma Empresa pela 2X\", () => {\r",
											"    const expectedMessage = `Essa companhia n√£o existem em nossa base de dados.`;\r",
											"    pm.expect(pm.response.json().msg).to.eql(expectedMessage);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL_RonBugado}}/api/company/{{IDCompany}}",
									"host": [
										"{{baseURL_RonBugado}}"
									],
									"path": [
										"api",
										"company",
										"{{IDCompany}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Relaciona os endpoints referentes as empresa."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Auth",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{tokenAdmin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}